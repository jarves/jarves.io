title: Installation
layout: documentation
sort: 0
contents:
    -
        boxId: 1
        content: |
            # Installation
            
            This describes the customized installation, usually used by developers.
            
            A end-user zip package can be downloaded at http://jarves.io when we've released the first alpha version.
            
            ## Jarves Standard
            
            The easiest way yet is to install [github.com/jarves/jarves-standard](https://github.com/jarves/jarves-standard).
            See readme for the setup introduction.
            
            ## Custom installation
            
            If you want to go the hard way, so can install symfony and add Jarves on your own. This is
            also the introduction you should follow when you have already a Symfony application and
            want to add Jarves additional to it.
            
            ### 1. [Install Symfony](http://symfony.com/doc/current/book/installation.html) (v3.*)
            
            ```html
            composer create-project symfony/framework-standard-edition website-with-jarves
            ```
            
            ### 2.1 Install the Jarves bundles for development/testing

            Remove in `composer.json` the `config.platform.php` settings (latest lines).
            Add in `composer.json` 
            
            ```
            {
                ...
                 "minimum-stability": "dev",
                 "prefer-stable": true,
            }
            ```
            
            Use `"symfony-assets-install": "symlink"` if your system supports symlinks.

            ```bash
            cd website-with-jarves
            composer require jarves/jarves:dev-master
            composer require jarves/publication-bundle:dev-master
            composer require jarves/demotheme-bundle:dev-master
            ```
            
            ### 2.2 Install some dependencies
            
            #### SCSS
            
            http://sass-lang.com/install
            
            1. osx: `sudo gem install sass`
            2. linux: `sudo su -c "gem install sass"`
            3. windows: see http://sass-lang.com/install

            ## Configure Symfony 

            Activate the bundle in your AppKernel:
            
            ```php
            <?php
            // app/AppKernel.php
            
            public function registerBundles()
            {
                $bundles = array(
                    // ...
            
            
                    // our dependencies - it's important that these come before Jarves
                    new Propel\Bundle\PropelBundle\PropelBundle(),
                    new FOS\RestBundle\FOSRestBundle(),
                    new Nelmio\ApiDocBundle\NelmioApiDocBundle(),
            
                    // Jarves
                    new Jarves\JarvesBundle(),
                    new Jarves\DemoTheme\JarvesDemoThemeBundle(),
                    new Jarves\Publication\JarvesPublicationBundle(),
                );
            }
            ```
            
            ### 3. Define the jarves configuration
            
            ```bash
               cp src/Jarves/Resources/meta/config.xml.dist app/config/config.jarves.xml
               #or if from composer
               cp vendor/jarves/jarves/Resources/meta/config.xml.dist app/config/config.jarves.xml
            ```
            
            Adjust the `<database>` configuration in `app/config/config.jarves.xml`.
            
            > __Pro tip__ You can completely remove `<database>` section, then Symfony is using the database settings from your `app/config/parameters.yml`.
            If you use this `<database>` configuration way, then all database related stuff regarding Propel from your `app/config` is overwritten.
            This database section modifies only Propel connection settings (not Doctrine or other services that use `app/config/parameters.yml` `database_*` parameters)
            However, is then necessary to configure Propel's configuration on your own in app/config/config.yml.
            
            ```xml
              <database>
                <connections>
                  <!--
                    type: mysql|pgsql|sqlite (the pdo driver name)
                    persistent: true|false (if the connection should be persistent)
                    slave: true|false (if the connection is a slave or not (readonly or not))
                    charset: 'utf8'
                  -->
                  <connection type="mysql" persistent="false" charset="utf8" slave="false">
                    <!--Can be a IP or a hostname. For SQLite enter here the path to the file.-->
                    <server>127.0.0.1</server>
                    <port></port>
                    <!--The schema/database name-->
                    <name>test</name>
                    <username>root</username>
                    <password></password>
                  </connection>
                </connections>
              </database>
            ```
            
            Adjust in `app/config/config.jarves.xml` `<groupOwner>www-data</groupOwner>` to a group that your websites is running in.
            For OSX its mostly `_www` or `staff`, and for Ubuntu/Debian `www-data`. This is necessary because Jarves
            creates files and changes its file group owner to the correct name defined in `groupOwner`.
            
            Note: When you change `app/config/config.jarves.xml` you need to clean the cache (`rm -rf var/cache/*`).
            
            ### 4. Setup models and database schema
            
            ```bash
            php bin/console propel:model:build #build base model
            
            php bin/console propel:migration:diff #generates a database schema diff
            php bin/console propel:migration:up #upgrade the database schema
            
            ### Installs demo data
            
            php bin/console jarves:install:demo 127.0.0.1 /
            
            ```
            
            ### 5. Setup the administration route. Open `app/config/routing.yml` and paste this route:
            
            ```yml
            jarves:
                resource: "@JarvesBundle/Resources/config/routing.yml"
            ```
            
            ### 6. Verify
            
            run
            
            ```bash
            php bin/console server:run
            # open http://127.0.0.1:8000/jarves
            ```
            
            Username and password for the administration login (http://127.0.0.1:8000/jarves) is both `admin`.
            
            REST API doc powered by NelmioApiBundle is available at http://127.0.0.1:8000/jarves/api.
            
            The frontend routes are loaded automatically.
            
        type: markdown
        hide: false
